@startuml uTime Backend
skinparam packageStyle rectangle

package "Profiles" {
    package "Domain" {
        package "Model" {
            package "Aggregates" {
                class Clients {
                    -birth_date: ClientBirthDate
                    -fullName: FullName     
                    -userId: UserId               
                }

                class Providers {
                    -providerProfilesId: ProviderProfilesId
                    -imageUrl: ProviderImageUrl
                    -location: ProviderLocation
                }
                
                class Users <<AggregateRoot>> {
                    email: Email
                    password: Password
                }

                class Socials {
                    -socialData: SocialData
                }
                class Provider_Profiles {
                    -profileImageUrl: ProfileImageUrl
                    -coverImageUrl: CoverImageUrl
                }
                class Portfolio_Images {
                    -providerId: ProviderId
                    -imageUrl: ImageUrl
                }
            }

            package "Commands" {
                class CreateClientCommand <<Record>>
                class CreateProviderCommand <<Record>>
                class CreateProviderProfiles <<Record>>
                class CreatePortfolioImagesCommand <<Record>>
                class CreateSocialsCommand <<Record>>
            }
            package "Queries" {
                class GetAllClientsQuery <<Record>>
                class GetAllProvidersQuery <<Record>>
                class GetClientsByIdQuery <<Record>>
                class GetProviderByEmailQuery <<Record>>
                class GetProviderByIdQuery <<Record>>
            }
            package "ValueObjects"{
                class UserId <<ValueObject>> {
                    -id: long
                }
                class ProviderId <<ValueObject>> {
                    -id: long
                }

                class FullName <<ValueObject>> {
                    -firstName: String
                    -lastName: String
                    --
                    +getFullName(): String
                    +getFirstName(): String
                    +getLastName(): String
                }
                class ProviderImageUrl <<ValueObject>> {
                    -url: String
                }
                class ProviderLocation <<ValueObject>> {
                    -location: String
                }
                class Contact <<ValueObject>> {
                    -phoneNumber: String
                    -email: String
                }
                class PasswordHash <<ValueObject>> {
                    -passwordHash: String
                }
                
                class SocialId <<ValueObject>> {
                    -id: long
                }
                class SocialData <<ValueObject>> {
                    -socialUrl: String
                    -socialIcon: String
                    --
                    +getSocialUrl(): String
                    +getSocialIcon(): String
                }
                class ProviderProfilesId <<ValueObject>> {
                    -providerProfilesId: long
                }
                class ProfileImageUrl <<ValueObject>> {
                    -profileImageUrl: String
                }
                class CoverImageUrl <<ValueObject>> {
                    -coverImageUrl: String
                }
                class PortfolioImagesId <<ValueObject>> {
                    -portfolioImagesId: long
                }
                class ImageUrl <<ValueObject>> {
                    -imageUrl: String
                }
                class CompanyName <<ValueObject>> {
                    -companyName: String
                }
            }
        }
        package "Services" {
            class ClientCommandService <<Interface>> {
                +Optional<Clients> handle(CreateClientCommand command)
            }
            class ClientsQueryService <<Interface>> {
                +List<Clients> handle(GetAllClientsQuery query)
                +Optional<Clients> handle(GetClientsByIdQuery query)
            }
            class ProviderCommandService <<Interface>> {
                +Optional<Clients> handle(CreateProviderCommand command)
            }
            class ProvidersQueryService <<Interface>> {
                +List<Providers> handle(GetAllProvidersQuery query)
                +Optional<Clients> handle(GetProvidersByIdQuery query)
                +Optional<Clients> handle(GetClientsByEmailQuery query)
            }
            class ProviderProfilesCommandService <<Interface>> {
                +Optional<Clients> handle(CreateProviderProfiles command)
            }
            class ProviderProfilesQueryService <<Interface>> {
                +List<Provider_Profiles> handle(GetAllProviderProfilesQuery query)
                +Optional<Provider_Profiles> handle(GetProviderProfileByIdQuery query)
            }
            class PortfolioImagesCommandService <<Interface>> {
                +Optional<Clients> handle(CreatePortfolioImagesCommand command)
            }
            class PortfolioImagesQueryService <<Interface>> {
                +List<Portfolio_Images> handle(GetAllPortfolioImagesQuery query)
                +Optional<Portfolio_Images> handle(GetPortfolioImageByIdQuery query)
            }
            class SocialsCommandService <<Interface>> {
                +Optional<Clients> handle(CreateSocialsCommand command)
            }
            class SocialsQueryService <<Interface>> {
                +List<Socials> handle(GetAllSocialsQuery query)
                +Optional<Socials> handle(GetSocialByIdQuery query)
            }
        }
    }
    package "Application" {
        package "Internal" {
            package CommandServices {
                class ClientCommandServiceImpl {
                    -ClientRepository: clientRepository
                    --
                    +ClientCommandServiceImpl(ClientRepository clientRepository)
                    +Optional<Clients> handle (CreateClientCommand command)
                }
                class ProviderCommandServiceImpl {
                    -ProviderRepository: providerRepository
                    --
                    +ProviderCommandServiceImpl(ProviderRepository providerRepository)
                    +Optional<Clients> handle (CreateProviderCommand command)
                }
                class ProviderProfilesCommandServiceImpl {
                    -ProviderRepository: providerRepository
                    --
                    +ProviderProfilesCommandServiceImpl(ProviderRepository providerRepository)
                    +Optional<Clients> handle (CreateProviderProfiles command)
                }
                class PortfolioImagesCommandServiceImpl {
                    -ProviderRepository: providerRepository
                    --
                    +PortfolioImagesCommandServiceImpl(ProviderRepository providerRepository)
                    +Optional<Clients> handle (CreatePortfolioImagesCommand command)
                }
                class SocialsCommandServiceImpl {
                    -ProviderRepository: providerRepository
                    --
                    +SocialsCommandServiceImpl(ProviderRepository providerRepository)
                    +Optional<Clients> handle (CreateSocialsCommand command)
                }
            }
            package QueryServices {
                class ClientsQueryServiceImpl {
                    -ClientRepository: clientRepository
                    --
                    +List<Clients> handle(GetAllClientsQuery query)
                    +Optional<Clients> handle(GetClientsByIdQuery query)
                }
                class ProvidersQueryServiceImpl {
                    -ProviderRepository: providerRepository
                    --
                    +List<Providers> handle(GetAllProvidersQuery query)
                    +Optional<Clients> handle(GetProvidersByIdQuery query)
                    +Optional<Clients> handle(GetClientsByEmailQuery query)
                }
            }
        }
    }
    package "Infrastructure" {
        package "Persistence" {
            package "jpa" {
                class ClientRepository <<Interface>> {
                    
                }
                class ProviderRepository <<Interface>> {

                }

            }
        }
    }
    package "Interfaces" {
        package "Rest" {
            package "Controllers" {
                class ClientController {
                    -ClientCommandService: clientRepository
                    -ClientsQueryService: clientQueryService
                    --
                    +ResponseEntity<ClientResource>: createClient()
                    +ResponseEntity<ClientResource>: getClientByIdPath()
                    +ResponseEntity<?>: getClients()
                    +ResponseEntity<ClientResource>: getClientById()
                    +ResponseEntity<List<ClientResource>>: getAllClients()
                }
                class ProvidersController {
                    -ProvidersCommandService: providerRepository
                    -ProviderQueryService: providerQueryService
                    --
                    +ResponseEntity<ProviderResource>: createProvider()
                    +ResponseEntity<ProviderResource>: getProviderByIdPath()
                    +ResponseEntity<?>: getProviderWithParameters()
                    +ResponseEntity<ProviderResource>: getProviderById()
                    +ResponseEntity<ProviderResource>: getProviderByEmail()
                    +ResponseEntity<List<ProviderResource>>: getAllProviders()
                }
                class ProviderProfilesController {
                    -ProviderProfilesCommandService: providerProfilesCommandService
                    -ProviderProfilesQueryService: providerProfilesQueryService
                    --
                    +ResponseEntity<ProviderProfilesResource>: createProviderProfile()
                    +ResponseEntity<ProviderProfilesResource>: getProviderProfileByIdPath()
                    +ResponseEntity<?>: getProviderProfileWithParameters()
                    +ResponseEntity<ProviderProfilesResource>: getProviderProfileById()
                    +ResponseEntity<List<ProviderProfilesResource>>: getAllProviderProfiles()
                }
                class PortfolioImagesController {
                    -PortfolioImagesCommandService: portfolioImagesCommandService
                    -PortfolioImagesQueryService: portfolioImagesQueryService
                    --
                    +ResponseEntity<PortfolioImagesResource>: createPortfolioImage()
                    +ResponseEntity<PortfolioImagesResource>: getPortfolioImageByIdPath()
                    +ResponseEntity<?>: getPortfolioImageWithParameters()
                    +ResponseEntity<PortfolioImagesResource>: getPortfolioImageById()
                    +ResponseEntity<List<PortfolioImagesResource>>: getAllPortfolioImages()
                }
                class SocialsController {
                    -SocialsCommandService: socialsCommandService
                    -SocialsQueryService: socialsQueryService
                    --
                    +ResponseEntity<SocialsResource>: createSocial()
                    +ResponseEntity<SocialsResource>: getSocialByIdPath()
                    +ResponseEntity<?>: getSocialWithParameters()
                    +ResponseEntity<SocialsResource>: getSocialById()
                    +ResponseEntity<List<SocialsResource>>: getAllSocials()
                }
            }
            package "Resources" {
                class ClientResource <<Record>> {}
                class CreateClientResource <<Record>> {}
                class CreateProviderCommand <<Record>> {}
                class ProviderResource <<Record>> {}
            }
            package "Assembler" {
                class ClientResourceFrontEntityAssembler {
                    +ClientResource: toResourceFromEntity()
                }
                class CreateClientCommandFromResourceAssembler {
                    +CreateClientCommand: toCommandFromResource()
                }
                class CreateProviderCommandFromResourceAssembler {
                    +CreateProviderCommand: toCommandFromResource()
                }
                class ProviderResourceFromEntityAssembler {
                    +ProviderResource: toResourceFromEntity()
                }
                class ProviderProfilesResourceFromEntityAssembler {
                    +ProviderProfilesResource: toResourceFromEntity()
                }
                class CreateProviderProfilesCommandFromResourceAssembler {
                    +CreateProviderProfilesCommand: toCommandFromResource()
                }
                class PortfolioImagesResourceFromEntityAssembler {
                    +PortfolioImagesResource: toResourceFromEntity()
                }
                class CreatePortfolioImagesCommandFromResourceAssembler {
                    +CreatePortfolioImagesCommand: toCommandFromResource()
                }
                class SocialsResourceFromEntityAssembler {
                    +SocialsResource: toResourceFromEntity()
                }
                class CreateSocialsFromResourceAssembler {
                    +CreateSocials: toCommandFromResource()
                }
            }
        }
    }
}

package "Services" {
    package "Domain" {
        package "Model" {
            package "Aggregates" {
                class Services {
                    -providerId: providerId
                    -serviceDetails: ServiceDetails
                    -serviceName: ServiceName
                    -duration: Duration
                    -price: Money
                    -status: Status
                }
            }

            package "ValueObjects" {
                class ProviderId <<ValueObject>> {
                    -id: long
                }
                class ServiceDetails <<ValueObject>>{
                    -serviceDetails: long
                }
                class ServiceName <<ValueObject>> {
                    -serviceName: long
                }
                class Duration <<ValueObject>> {
                    -duration: Int
                }
                class Status <<ValueObject>> {
                    -status: Boolean
                }
            }

            package "Commands" {
                class CreateServiceCommand <<Record>> {}
                class UpdateServiceCommand <<Record>> {}
            }
            package "Queries" {
                class GetAllServicesQuery <<Record>> {}
                class GetServiceByIdQuery <<Record>> {}
                class GetServicesByProviderIdQuery <<Record>> {}
            }
        }
        package "Services" {
            class ServiceCommandService <<Interface>> {
                +Optional<Services> handle(CreateServiceCommand command)
                +Optional<Services> handle(UpdateServiceCommand command)
            }
            class ServicesQueryService <<Interface>> {
                +List<Services> handle(GetAllServicesQuery query)
                +Optional<Services> handle(GetServiceByIdQuery query)
                +List<Services> handle(GetServicesByProviderIdQuery query)
            }
        }

        package "Exeptions" {
            class ProviderNotFoundException <<Exception>> {
                +ProviderNotFoundException(providerId)
            }
        }
    }
    package "Application" {
        package "Internal" {
            package CommandServices {
                class ServiceCommandServiceImpl {
                    -ServiceRepository: serviceRepository
                    --
                    +Optional<Services> handle(CreateServiceCommand command)
                    +Optional<Services> handle(UpdateServiceCommand command)
                }
            }
            package QueryServices {
                class ServicesQueryServiceImpl {
                    -ServiceRepository: serviceRepository
                    --
                    +List<Services> handle(GetAllServicesQuery query)
                    +Optional<Services> handle(GetServiceByIdQuery query)
                    +List<Services> handle(GetServicesByProviderIdQuery query)
                }
            }
        }
    }
    package "Infrastructure" {
        package "Persistence" {
            package "jpa" {
                class ServiceRepository <<Interface>> {}
            }
        }
    }
    package "Interfaces" {
        package "Rest" {
            package "Controllers" {
                class ServiceController {
                    -ServiceCommandService: serviceCommandService
                    -ServicesQueryService: servicesQueryService
                    --
                    +ResponseEntity<ServiceResource>: createService()
                    +ResponseEntity<ServiceResource>: updateService()
                    +ResponseEntity<?>: getServicesWithParameters()
                    +ResponseEntity<ServiceResource>: getServiceById()
                    +ResponseEntity<List<ServiceResource>>: getAllServices()
                }
            }
            package "Resources" {
                class ServiceResource <<Record>> {}
                class CreateServiceCommand <<Record>> {}
                class UpdateServiceCommand <<Record>> {}
            }
            package "Assembler" {
                class ServiceResourceFromEntityAssembler {
                    +ServiceResource: toResourceFromEntity()
                }
                class CreateServiceCommandFromResourceAssembler {
                    +CreateServiceCommand: toCommandFromResource()
                }
                class UpdateServiceCommandFromResourceAssembler {
                    +UpdateServiceCommand: toCommandFromResource()
                }
            }
        }
    }
}

package "Reviews" {
    package "Domain" {
        package "Model" {
            package "Aggregates" {
                class Reviews {
                    -provider_id: ProviderId
                    -client_id: ClientId
                    -review: Review
                }
            }

            package "ValueObjects" {
                class ProviderId <<ValueObject>> {
                    -id: long
                }
                class ClientId <<ValueObject>> {
                    -id: long
                }
                class Review <<ValueObject>> {
                    -review: String
                    -rating: int
                    -read: boolean
                }
            }

            package "Exceptions" {
                class ReviewNotFoundException <<Exception>> {
                    +ReviewNotFoundException(reviewId)
                }
            }

            package "Commands" {
                class CreateReviewCommand <<Record>> {}
                class UpdateReviewCommand <<Record>> {}
            }
            package "Queries" {
                class GetAllReviewsQuery <<Record>> {}
                class GetReviewByIdQuery <<Record>> {}
                class GetReviewsByProviderIdQuery <<Record>> {}
                class GetReviewsByClientIdQuery <<Record>> {}
            }
        }
        package "Services" {
            class ReviewCommandService <<Interface>> {
                +Optional<Reviews> handle(CreateReviewCommand command)
                +Optional<Reviews> handle(UpdateReviewCommand command)
            }
            class ReviewsQueryService <<Interface>> {
                +List<Reviews> handle(GetAllReviewsQuery query)
                +Optional<Reviews> handle(GetReviewByIdQuery query)
                +List<Reviews> handle(GetReviewsByProviderIdQuery query)
                +List<Reviews> handle(GetReviewsByClientIdQuery query)
            }
        }
    }
    package "Application" {
        package "Internal" {
            package CommandServices {
                class ReviewCommandServiceImpl {
                    -ReviewRepository: reviewRepository
                    --
                    +Optional<Reviews> handle(CreateReviewCommand command)
                    +Optional<Reviews> handle(UpdateReviewCommand command)
                }
            }
            package QueryServices {
                class ReviewsQueryServiceImpl {
                    -ReviewRepository: reviewRepository
                    --
                    +List<Reviews> handle(GetAllReviewsQuery query)
                    +Optional<Reviews> handle(GetReviewByIdQuery query)
                    +List<Reviews> handle(GetReviewsByProviderIdQuery query)
                    +List<Reviews> handle(GetReviewsByClientIdQuery query)
                }
            }
        }
    }
    package "Infrastructure" {
        package "Persistence" {
            package "jpa" {
                class ReviewRepository <<Interface>> {}
            }
        }
    }
    package "Interfaces" {
        package "Rest" {
            package "Controllers" {
                class ReviewController {
                    -ReviewCommandService: reviewCommandService
                    -ReviewsQueryService: reviewsQueryService
                    --
                    +ResponseEntity<ReviewResource>: createReview()
                    +ResponseEntity<ReviewResource>: updateReview()
                    +ResponseEntity<?>: getReviewsWithParameters()
                    +ResponseEntity<ReviewResource>: getReviewById()
                    +ResponseEntity<List<ReviewResource>>: getAllReviews()
                }
            }
            package "Resources" {
                class ReviewResource <<Record>> {}
                class CreateReviewCommand <<Record>> {}
                class UpdateReviewCommand <<Record>> {}
            }
            package "Assembler" {
                class ReviewResourceFromEntityAssembler {
                    +ReviewResource: toResourceFromEntity()
                }
                class CreateReviewCommandFromResourceAssembler {
                    +CreateReviewCommand: toCommandFromResource()
                }
                class UpdateReviewCommandFromResourceAssembler {
                    +UpdateReviewCommand: toCommandFromResource()
                }
            }
        }
        package "acl" {
            class ReviewsContextFacadeImpl {}
        }
    }
}

package "Reservations" {
    package "Domain" {
        package "Model" {
            package "Aggregates" {
                class Reservations {
                    -client_id: ClientId
                    -service_id: ServiceId
                    -provider_id: ProviderId
                    -payment_id: PaymentId
                    -time_slot_id: TimeSlotId
                    -worker_id: WorkerId
                }
            }
            package "ValueObjects" {
                class ClientId <<ValueObject>> {
                    -id: long
                }
                class ServiceId <<ValueObject>> {
                    -id: long
                }
                class PaymentId <<ValueObject>> {
                    -id: long
                }
                class TimeSlotId <<ValueObject>> {
                    -id: long
                }
                class WorkerId <<ValueObject>> {
                    -id: String
                }
            }
            package "Commands" {
                class CreateReservationCommand <<Record>> {}
                class UpdateReservationCommand <<Record>> {}
            }
            package "Queries" {
                class GetAllReservationsQuery <<Record>> {}
                class GetReservationByIdQuery <<Record>> {}
                class GetReservationsByClientIdQuery <<Record>> {}
                class GetReservationsByProviderIdQuery <<Record>> {}
            }
        }
        package "Services" {
            class ReservationCommandService <<Interface>> {
                +Optional<Reservations> handle(CreateReservationCommand command)
                +Optional<Reservations> handle(UpdateReservationCommand command)
            }
            class ReservationsQueryService <<Interface>> {
                +List<Reservations> handle(GetAllReservationsQuery query)
                +Optional<Reservations> handle(GetReservationByIdQuery query)
                +List<Reservations> handle(GetReservationsByClientIdQuery query)
                +List<Reservations> handle(GetReservationsByProviderIdQuery query)
                +List<Reservations> handle(GetReservationsByWorkerIdQuery query)
            }
        }
    }
    package "Application" {
        package "Internal" {
            package CommandServices {
                class ReservationCommandServiceImpl {
                    -ReservationRepository: reservationRepository
                    --
                    +Optional<Reservations> handle(CreateReservationCommand command)
                    +Optional<Reservations> handle(UpdateReservationCommand command)
                }
            }
            package QueryServices {
                class ReservationsQueryServiceImpl {
                    -ReservationRepository: reservationRepository
                    --
                    +List<Reservations> handle(GetAllReservationsQuery query)
                    +Optional<Reservations> handle(GetReservationByIdQuery query)
                    +List<Reservations> handle(GetReservationsByClientIdQuery query)
                    +List<Reservations> handle(GetReservationsByProviderIdQuery query)
                    +List<Reservations> handle(GetReservationsByWorkerIdQuery query)
                }
            }
        }
    }
    package "Infrastructure" {
        package "Persistence" {
            package "jpa" {
                class ReservationRepository <<Interface>> {}
            }
        }
    }
    package "Interfaces" {
        package "Rest" {
            package "Controllers" {
                class ReservationController {
                    -ReservationCommandService: reservationCommandService
                    -ReservationsQueryService: reservationsQueryService
                    --
                    +ResponseEntity<ReservationResource>: createReservation()
                    +ResponseEntity<ReservationResource>: updateReservation()
                    +ResponseEntity<?>: getReservationsWithParameters()
                    +ResponseEntity<ReservationResource>: getReservationById()
                    +ResponseEntity<List<ReservationResource>>: getAllReservations()
                }
            }
            package "Resources" {
                class ReservationResource <<Record>> {}
                class CreateReservationCommand <<Record>> {}
                class UpdateReservationCommand <<Record>> {}
            }
            package "Assembler" {
                class ReservationResourceFromEntityAssembler {
                    +ReservationResource: toResourceFromEntity()
                }
                class CreateReservationCommandFromResourceAssembler {
                    +CreateReservationCommand: toCommandFromResource()
                }
                class UpdateReservationCommandFromResourceAssembler {
                    +UpdateReservationCommand: toCommandFromResource()
                }
            }
        }
    }
}



package "Shared" {
    package "Infrastructure" {
        package "Persistence" {
            package "jpa" {
                class SnakeCasePhysicalNamingStrategy <<Class>>
            }
        }
    }
    package "Domain" {
        package "Model" {
            package "Entity" {
                class Money {
                    -money: Money
                }
            }
            package "ValueObjects" {
                class Money <<ValueObject>> {
                    currency: string
                    amount: long
                }
            }
        }
    }
}

package "Workers" {
    package "Domain" {
        package "Model" {
            package "Aggregates" {
                class Workers {
                    -name: WorkerName
                    -specialization: WorkerSpecialization
                    -photo_url: WorkerPhotoUrl
                }
            }
            package "ValueObjects" {
                class WorkerName <<ValueObject>> {
                    -name: String
                }
                class WorkerSpecialization <<ValueObject>> {
                    -specialization: String
                }
                class WorkerPhotoUrl <<ValueObject>> {
                    -photo_url: String
                }
            }
            package "Commands" {
                class CreateWorkerCommand <<Record>> {}
                class UpdateWorkerCommand <<Record>> {}
            }
            package "Queries" {
                class GetAllWorkersQuery <<Record>> {}
                class GetWorkerByIdQuery <<Record>> {}
                class GetWorkersByProviderIdQuery <<Record>> {}
            }
        }
        package "Services" {
            class WorkerCommandService <<Interface>> {
                +Optional<Workers> handle(CreateWorkerCommand command)
                +Optional<Workers> handle(UpdateWorkerCommand command)
            }
            class WorkersQueryService <<Interface>> {
                +List<Workers> handle(GetAllWorkersQuery query)
                +Optional<Workers> handle(GetWorkerByIdQuery query)
                +List<Workers> handle(GetWorkersByProviderIdQuery query)
            }
        }
    }
    package "Application" {
        package "Internal" {
            package CommandServices {
                class WorkerCommandServiceImpl {
                    -WorkerRepository: workerRepository
                    --
                    +Optional<Workers> handle(CreateWorkerCommand command)
                    +Optional<Workers> handle(UpdateWorkerCommand command)
                }
            }
            package QueryServices {
                class WorkersQueryServiceImpl {
                    -WorkerRepository: workerRepository
                    --
                    +List<Workers> handle(GetAllWorkersQuery query)
                    +Optional<Workers> handle(GetWorkerByIdQuery query)
                    +List<Workers> handle(GetWorkersByProviderIdQuery query)
                }
            }
        }
    }
    package "Infrastructure" {
        package "Persistence" {
            package "jpa" {
                class WorkerRepository <<Interface>> {}
            }
        }
    }
    package "Interfaces" {
        package "Rest" {
            package "Controllers" {
                class WorkerController {
                    -WorkerCommandService: workerCommandService
                    -WorkersQueryService: workersQueryService
                    --
                    +ResponseEntity<WorkerResource>: createWorker()
                    +ResponseEntity<WorkerResource>: updateWorker()
                    +ResponseEntity<?>: getWorkersWithParameters()
                    +ResponseEntity<WorkerResource>: getWorkerById()
                    +ResponseEntity<List<WorkerResource>>: getAllWorkers()
                }
            }
            package "Resources" {
                class WorkerResource <<Record>> {}
                class CreateWorkerCommand <<Record>> {}
                class UpdateWorkerCommand <<Record>> {}
            }
            package "Assembler" {
                class WorkerResourceFromEntityAssembler {
                    +WorkerResource: toResourceFromEntity()
                }
                class CreateWorkerCommandFromResourceAssembler {
                    +CreateWorkerCommand: toCommandFromResource()
                }
                class UpdateWorkerCommandFromResourceAssembler {
                    +UpdateWorkerCommand: toCommandFromResource()
                }
            }
        }
    }
}


@enduml