@startuml uTime Backend
skinparam packageStyle rectangle

package "Profiles" {
    package "Domain" {
        package "Model" {
            package "Aggregates" {
                class Clients {
                    -birth_date: ClientBirthDate
                    -fullName: FullName
                    -userId: UserId
                }

                class Providers {
                    -providerProfilesId: ProviderProfilesId
                    -imageUrl: ProviderImageUrl
                    -location: ProviderLocation
                }

                class Users <<AggregateRoot>> {
                    email: Email
                    password: Password
                }

                class Socials {
                    -socialData: SocialData
                }
                class Provider_Profiles {
                    -profileImageUrl: ProfileImageUrl
                    -coverImageUrl: CoverImageUrl
                }
                class Portfolio_Images {
                    -providerId: ProviderId
                    -imageUrl: ImageUrl
                }
            }

            package "Commands" {
                class CreateClientCommand <<Record>>
                class CreateProviderCommand <<Record>>
                class CreateProviderProfiles <<Record>>
                class CreatePortfolioImagesCommand <<Record>>
                class CreateSocialsCommand <<Record>>
            }
            package "Queries" {
                class GetAllClientsQuery <<Record>>
                class GetAllProvidersQuery <<Record>>
                class GetClientsByIdQuery <<Record>>
                class GetProviderByEmailQuery <<Record>>
                class GetProviderByIdQuery <<Record>>
            }
            package "ValueObjects"{
                class UserId <<ValueObject>> {
                    -id: long
                }
                class ProviderId <<ValueObject>> {
                    -id: long
                }

                class FullName <<ValueObject>> {
                    -firstName: String
                    -lastName: String
                    --
                    +getFullName(): String
                    +getFirstName(): String
                    +getLastName(): String
                }
                class ProviderImageUrl <<ValueObject>> {
                    -url: String
                }
                class ProviderLocation <<ValueObject>> {
                    -location: String
                }
                class Contact <<ValueObject>> {
                    -phoneNumber: String
                    -email: String
                }
                class PasswordHash <<ValueObject>> {
                    -passwordHash: String
                }

                class SocialId <<ValueObject>> {
                    -id: long
                }
                class SocialData <<ValueObject>> {
                    -socialUrl: String
                    -socialIcon: String
                    --
                    +getSocialUrl(): String
                    +getSocialIcon(): String
                }
                class ProviderProfilesId <<ValueObject>> {
                    -providerProfilesId: long
                }
                class ProfileImageUrl <<ValueObject>> {
                    -profileImageUrl: String
                }
                class CoverImageUrl <<ValueObject>> {
                    -coverImageUrl: String
                }
                class PortfolioImagesId <<ValueObject>> {
                    -portfolioImagesId: long
                }
                class ImageUrl <<ValueObject>> {
                    -imageUrl: String
                }
                class CompanyName <<ValueObject>> {
                    -companyName: String
                }
            }
        }
        package "Services" {
            class ClientCommandService <<Interface>> {
                +Optional<Clients> handle(CreateClientCommand command)
            }
            class ClientsQueryService <<Interface>> {
                +List<Clients> handle(GetAllClientsQuery query)
                +Optional<Clients> handle(GetClientsByIdQuery query)
            }
            class ProviderCommandService <<Interface>> {
                +Optional<Clients> handle(CreateProviderCommand command)
            }
            class ProvidersQueryService <<Interface>> {
                +List<Providers> handle(GetAllProvidersQuery query)
                +Optional<Clients> handle(GetProvidersByIdQuery query)
                +Optional<Clients> handle(GetClientsByEmailQuery query)
            }
            class ProviderProfilesCommandService <<Interface>> {
                +Optional<Clients> handle(CreateProviderProfiles command)
            }
            class ProviderProfilesQueryService <<Interface>> {
                +List<Provider_Profiles> handle(GetAllProviderProfilesQuery query)
                +Optional<Provider_Profiles> handle(GetProviderProfileByIdQuery query)
            }
            class PortfolioImagesCommandService <<Interface>> {
                +Optional<Clients> handle(CreatePortfolioImagesCommand command)
            }
            class PortfolioImagesQueryService <<Interface>> {
                +List<Portfolio_Images> handle(GetAllPortfolioImagesQuery query)
                +Optional<Portfolio_Images> handle(GetPortfolioImageByIdQuery query)
            }
            class SocialsCommandService <<Interface>> {
                +Optional<Clients> handle(CreateSocialsCommand command)
            }
            class SocialsQueryService <<Interface>> {
                +List<Socials> handle(GetAllSocialsQuery query)
                +Optional<Socials> handle(GetSocialByIdQuery query)
            }
        }
    }
    package "Application" {
        package "Internal" {
            package CommandServices {
                class ClientCommandServiceImpl {
                    -ClientRepository: clientRepository
                    --
                    +ClientCommandServiceImpl(ClientRepository clientRepository)
                    +Optional<Clients> handle (CreateClientCommand command)
                }
                class ProviderCommandServiceImpl {
                    -ProviderRepository: providerRepository
                    --
                    +ProviderCommandServiceImpl(ProviderRepository providerRepository)
                    +Optional<Clients> handle (CreateProviderCommand command)
                }
                class ProviderProfilesCommandServiceImpl {
                    -ProviderRepository: providerRepository
                    --
                    +ProviderProfilesCommandServiceImpl(ProviderRepository providerRepository)
                    +Optional<Clients> handle (CreateProviderProfiles command)
                }
                class PortfolioImagesCommandServiceImpl {
                    -ProviderRepository: providerRepository
                    --
                    +PortfolioImagesCommandServiceImpl(ProviderRepository providerRepository)
                    +Optional<Clients> handle (CreatePortfolioImagesCommand command)
                }
                class SocialsCommandServiceImpl {
                    -ProviderRepository: providerRepository
                    --
                    +SocialsCommandServiceImpl(ProviderRepository providerRepository)
                    +Optional<Clients> handle (CreateSocialsCommand command)
                }
            }
            package QueryServices {
                class ClientsQueryServiceImpl {
                    -ClientRepository: clientRepository
                    --
                    +List<Clients> handle(GetAllClientsQuery query)
                    +Optional<Clients> handle(GetClientsByIdQuery query)
                }
                class ProvidersQueryServiceImpl {
                    -ProviderRepository: providerRepository
                    --
                    +List<Providers> handle(GetAllProvidersQuery query)
                    +Optional<Clients> handle(GetProvidersByIdQuery query)
                    +Optional<Clients> handle(GetClientsByEmailQuery query)
                }
            }
        }
    }
    package "Infrastructure" {
        package "Persistence" {
            package "jpa" {
                class ClientRepository <<Interface>> {

                }
                class ProviderRepository <<Interface>> {

                }

            }
        }
    }
    package "Interfaces" {
        package "Rest" {
            package "Controllers" {
                class ClientController {
                    -ClientCommandService: clientRepository
                    -ClientsQueryService: clientQueryService
                    --
                    +ResponseEntity<ClientResource>: createClient()
                    +ResponseEntity<ClientResource>: getClientByIdPath()
                    +ResponseEntity<?>: getClients()
                    +ResponseEntity<ClientResource>: getClientById()
                    +ResponseEntity<List<ClientResource>>: getAllClients()
                }
                class ProvidersController {
                    -ProvidersCommandService: providerRepository
                    -ProviderQueryService: providerQueryService
                    --
                    +ResponseEntity<ProviderResource>: createProvider()
                    +ResponseEntity<ProviderResource>: getProviderByIdPath()
                    +ResponseEntity<?>: getProviderWithParameters()
                    +ResponseEntity<ProviderResource>: getProviderById()
                    +ResponseEntity<ProviderResource>: getProviderByEmail()
                    +ResponseEntity<List<ProviderResource>>: getAllProviders()
                }
                class ProviderProfilesController {
                    -ProviderProfilesCommandService: providerProfilesCommandService
                    -ProviderProfilesQueryService: providerProfilesQueryService
                    --
                    +ResponseEntity<ProviderProfilesResource>: createProviderProfile()
                    +ResponseEntity<ProviderProfilesResource>: getProviderProfileByIdPath()
                    +ResponseEntity<?>: getProviderProfileWithParameters()
                    +ResponseEntity<ProviderProfilesResource>: getProviderProfileById()
                    +ResponseEntity<List<ProviderProfilesResource>>: getAllProviderProfiles()
                }
                class PortfolioImagesController {
                    -PortfolioImagesCommandService: portfolioImagesCommandService
                    -PortfolioImagesQueryService: portfolioImagesQueryService
                    --
                    +ResponseEntity<PortfolioImagesResource>: createPortfolioImage()
                    +ResponseEntity<PortfolioImagesResource>: getPortfolioImageByIdPath()
                    +ResponseEntity<?>: getPortfolioImageWithParameters()
                    +ResponseEntity<PortfolioImagesResource>: getPortfolioImageById()
                    +ResponseEntity<List<PortfolioImagesResource>>: getAllPortfolioImages()
                }
                class SocialsController {
                    -SocialsCommandService: socialsCommandService
                    -SocialsQueryService: socialsQueryService
                    --
                    +ResponseEntity<SocialsResource>: createSocial()
                    +ResponseEntity<SocialsResource>: getSocialByIdPath()
                    +ResponseEntity<?>: getSocialWithParameters()
                    +ResponseEntity<SocialsResource>: getSocialById()
                    +ResponseEntity<List<SocialsResource>>: getAllSocials()
                }
            }
            package "Resources" {
                class ClientResource <<Record>> {}
                class CreateClientResource <<Record>> {}
                class CreateProviderCommand <<Record>> {}
                class ProviderResource <<Record>> {}
            }
            package "Assembler" {
                class ClientResourceFrontEntityAssembler {
                    +ClientResource: toResourceFromEntity()
                }
                class CreateClientCommandFromResourceAssembler {
                    +CreateClientCommand: toCommandFromResource()
                }
                class CreateProviderCommandFromResourceAssembler {
                    +CreateProviderCommand: toCommandFromResource()
                }
                class ProviderResourceFromEntityAssembler {
                    +ProviderResource: toResourceFromEntity()
                }
                class ProviderProfilesResourceFromEntityAssembler {
                    +ProviderProfilesResource: toResourceFromEntity()
                }
                class CreateProviderProfilesCommandFromResourceAssembler {
                    +CreateProviderProfilesCommand: toCommandFromResource()
                }
                class PortfolioImagesResourceFromEntityAssembler {
                    +PortfolioImagesResource: toResourceFromEntity()
                }
                class CreatePortfolioImagesCommandFromResourceAssembler {
                    +CreatePortfolioImagesCommand: toCommandFromResource()
                }
                class SocialsResourceFromEntityAssembler {
                    +SocialsResource: toResourceFromEntity()
                }
                class CreateSocialsFromResourceAssembler {
                    +CreateSocials: toCommandFromResource()
                }
            }
        }
    }
}

' ================================
' 🔹 RELACIÓN: AGGREGATES → VALUE OBJECTS
' ================================
Profiles.Domain.Model.Aggregates.Clients --> Profiles.Domain.Model.ValueObjects.FullName
Profiles.Domain.Model.Aggregates.Clients --> Profiles.Domain.Model.ValueObjects.UserId
Profiles.Domain.Model.Aggregates.Clients --> Profiles.Domain.Model.ValueObjects.ClientBirthDate

Profiles.Domain.Model.Aggregates.Providers --> Profiles.Domain.Model.ValueObjects.ProviderProfilesId
Profiles.Domain.Model.Aggregates.Providers --> Profiles.Domain.Model.ValueObjects.ProviderImageUrl
Profiles.Domain.Model.Aggregates.Providers --> Profiles.Domain.Model.ValueObjects.ProviderLocation

Profiles.Domain.Model.Aggregates.Users --> Profiles.Domain.Model.ValueObjects.Email
Profiles.Domain.Model.Aggregates.Users --> Profiles.Domain.Model.ValueObjects.PasswordHash

Profiles.Domain.Model.Aggregates.Socials --> Profiles.Domain.Model.ValueObjects.SocialData

Profiles.Domain.Model.Aggregates.Provider_Profiles --> Profiles.Domain.Model.ValueObjects.ProfileImageUrl
Profiles.Domain.Model.Aggregates.Provider_Profiles --> Profiles.Domain.Model.ValueObjects.CoverImageUrl

Profiles.Domain.Model.Aggregates.Portfolio_Images --> Profiles.Domain.Model.ValueObjects.ProviderId
Profiles.Domain.Model.Aggregates.Portfolio_Images --> Profiles.Domain.Model.ValueObjects.ImageUrl


' ================================
' 🔹 RELACIÓN: COMMANDS / QUERIES → AGGREGATES
' ================================
Profiles.Domain.Model.Commands.CreateClientCommand --> Profiles.Domain.Model.Aggregates.Clients
Profiles.Domain.Model.Commands.CreateProviderCommand --> Profiles.Domain.Model.Aggregates.Providers
Profiles.Domain.Model.Commands.CreateProviderProfiles --> Profiles.Domain.Model.Aggregates.Provider_Profiles
Profiles.Domain.Model.Commands.CreatePortfolioImagesCommand --> Profiles.Domain.Model.Aggregates.Portfolio_Images
Profiles.Domain.Model.Commands.CreateSocialsCommand --> Profiles.Domain.Model.Aggregates.Socials

Profiles.Domain.Model.Queries.GetAllClientsQuery --> Profiles.Domain.Model.Aggregates.Clients
Profiles.Domain.Model.Queries.GetClientsByIdQuery --> Profiles.Domain.Model.Aggregates.Clients
Profiles.Domain.Model.Queries.GetAllProvidersQuery --> Profiles.Domain.Model.Aggregates.Providers
Profiles.Domain.Model.Queries.GetProviderByEmailQuery --> Profiles.Domain.Model.Aggregates.Providers
Profiles.Domain.Model.Queries.GetProviderByIdQuery --> Profiles.Domain.Model.Aggregates.Providers


' ================================
' 🔹 RELACIÓN: DOMAIN SERVICES → COMMANDS / QUERIES
' ================================
Profiles.Domain.Services.ClientCommandService --> Profiles.Domain.Model.Commands.CreateClientCommand
Profiles.Domain.Services.ProviderCommandService --> Profiles.Domain.Model.Commands.CreateProviderCommand
Profiles.Domain.Services.ProviderProfilesCommandService --> Profiles.Domain.Model.Commands.CreateProviderProfiles
Profiles.Domain.Services.PortfolioImagesCommandService --> Profiles.Domain.Model.Commands.CreatePortfolioImagesCommand
Profiles.Domain.Services.SocialsCommandService --> Profiles.Domain.Model.Commands.CreateSocialsCommand

Profiles.Domain.Services.ClientsQueryService --> Profiles.Domain.Model.Queries.GetAllClientsQuery
Profiles.Domain.Services.ClientsQueryService --> Profiles.Domain.Model.Queries.GetClientsByIdQuery
Profiles.Domain.Services.ProvidersQueryService --> Profiles.Domain.Model.Queries.GetAllProvidersQuery
Profiles.Domain.Services.ProvidersQueryService --> Profiles.Domain.Model.Queries.GetProviderByIdQuery
Profiles.Domain.Services.ProvidersQueryService --> Profiles.Domain.Model.Queries.GetProviderByEmailQuery


' ================================
' 🔹 RELACIÓN: APPLICATION SERVICES IMPL → REPOSITORIES / COMMANDS
' ================================
Profiles.Application.Internal.CommandServices.ClientCommandServiceImpl --> Profiles.Infrastructure.Persistence.jpa.ClientRepository
Profiles.Application.Internal.CommandServices.ClientCommandServiceImpl --> Profiles.Domain.Model.Commands.CreateClientCommand

Profiles.Application.Internal.CommandServices.ProviderCommandServiceImpl --> Profiles.Infrastructure.Persistence.jpa.ProviderRepository
Profiles.Application.Internal.CommandServices.ProviderCommandServiceImpl --> Profiles.Domain.Model.Commands.CreateProviderCommand

Profiles.Application.Internal.CommandServices.ProviderProfilesCommandServiceImpl --> Profiles.Infrastructure.Persistence.jpa.ProviderRepository
Profiles.Application.Internal.CommandServices.ProviderProfilesCommandServiceImpl --> Profiles.Domain.Model.Commands.CreateProviderProfiles

Profiles.Application.Internal.CommandServices.PortfolioImagesCommandServiceImpl --> Profiles.Infrastructure.Persistence.jpa.ProviderRepository
Profiles.Application.Internal.CommandServices.PortfolioImagesCommandServiceImpl --> Profiles.Domain.Model.Commands.CreatePortfolioImagesCommand

Profiles.Application.Internal.CommandServices.SocialsCommandServiceImpl --> Profiles.Infrastructure.Persistence.jpa.ProviderRepository
Profiles.Application.Internal.CommandServices.SocialsCommandServiceImpl --> Profiles.Domain.Model.Commands.CreateSocialsCommand

Profiles.Application.Internal.QueryServices.ClientsQueryServiceImpl --> Profiles.Infrastructure.Persistence.jpa.ClientRepository
Profiles.Application.Internal.QueryServices.ClientsQueryServiceImpl --> Profiles.Domain.Model.Queries.GetAllClientsQuery
Profiles.Application.Internal.QueryServices.ClientsQueryServiceImpl --> Profiles.Domain.Model.Queries.GetClientsByIdQuery

Profiles.Application.Internal.QueryServices.ProvidersQueryServiceImpl --> Profiles.Infrastructure.Persistence.jpa.ProviderRepository
Profiles.Application.Internal.QueryServices.ProvidersQueryServiceImpl --> Profiles.Domain.Model.Queries.GetAllProvidersQuery
Profiles.Application.Internal.QueryServices.ProvidersQueryServiceImpl --> Profiles.Domain.Model.Queries.GetProviderByIdQuery
Profiles.Application.Internal.QueryServices.ProvidersQueryServiceImpl --> Profiles.Domain.Model.Queries.GetProviderByEmailQuery


' ================================
' 🔹 RELACIÓN: CONTROLLERS → SERVICES / COMMANDS / QUERIES / AGGREGATES
' ================================
Profiles.Interfaces.Rest.Controllers.ClientController --> Profiles.Domain.Services.ClientCommandService
Profiles.Interfaces.Rest.Controllers.ClientController --> Profiles.Domain.Services.ClientsQueryService
Profiles.Interfaces.Rest.Controllers.ClientController --> Profiles.Domain.Model.Commands.CreateClientCommand
Profiles.Interfaces.Rest.Controllers.ClientController --> Profiles.Domain.Model.Queries.GetAllClientsQuery
Profiles.Interfaces.Rest.Controllers.ClientController --> Profiles.Domain.Model.Queries.GetClientsByIdQuery
Profiles.Interfaces.Rest.Controllers.ClientController --> Profiles.Domain.Model.Aggregates.Clients

Profiles.Interfaces.Rest.Controllers.ProvidersController --> Profiles.Domain.Services.ProviderCommandService
Profiles.Interfaces.Rest.Controllers.ProvidersController --> Profiles.Domain.Services.ProvidersQueryService
Profiles.Interfaces.Rest.Controllers.ProvidersController --> Profiles.Domain.Model.Commands.CreateProviderCommand
Profiles.Interfaces.Rest.Controllers.ProvidersController --> Profiles.Domain.Model.Queries.GetAllProvidersQuery
Profiles.Interfaces.Rest.Controllers.ProvidersController --> Profiles.Domain.Model.Queries.GetProviderByIdQuery
Profiles.Interfaces.Rest.Controllers.ProvidersController --> Profiles.Domain.Model.Queries.GetProviderByEmailQuery
Profiles.Interfaces.Rest.Controllers.ProvidersController --> Profiles.Domain.Model.Aggregates.Providers

Profiles.Interfaces.Rest.Controllers.ProviderProfilesController --> Profiles.Domain.Services.ProviderProfilesCommandService
Profiles.Interfaces.Rest.Controllers.ProviderProfilesController --> Profiles.Domain.Services.ProviderProfilesQueryService
Profiles.Interfaces.Rest.Controllers.ProviderProfilesController --> Profiles.Domain.Model.Commands.CreateProviderProfiles
Profiles.Interfaces.Rest.Controllers.ProviderProfilesController --> Profiles.Domain.Model.Aggregates.Provider_Profiles

Profiles.Interfaces.Rest.Controllers.PortfolioImagesController --> Profiles.Domain.Services.PortfolioImagesCommandService
Profiles.Interfaces.Rest.Controllers.PortfolioImagesController --> Profiles.Domain.Services.PortfolioImagesQueryService
Profiles.Interfaces.Rest.Controllers.PortfolioImagesController --> Profiles.Domain.Model.Commands.CreatePortfolioImagesCommand
Profiles.Interfaces.Rest.Controllers.PortfolioImagesController --> Profiles.Domain.Model.Aggregates.Portfolio_Images

Profiles.Interfaces.Rest.Controllers.SocialsController --> Profiles.Domain.Services.SocialsCommandService
Profiles.Interfaces.Rest.Controllers.SocialsController --> Profiles.Domain.Services.SocialsQueryService
Profiles.Interfaces.Rest.Controllers.SocialsController --> Profiles.Domain.Model.Commands.CreateSocialsCommand
Profiles.Interfaces.Rest.Controllers.SocialsController --> Profiles.Domain.Model.Aggregates.Socials


' ================================
' 🔹 RELACIÓN: ASSEMBLERS → COMMANDS / AGGREGATES / RESOURCES
' ================================
Profiles.Interfaces.Rest.Assembler.ClientResourceFrontEntityAssembler --> Profiles.Domain.Model.Aggregates.Clients
Profiles.Interfaces.Rest.Assembler.ClientResourceFrontEntityAssembler --> Profiles.Interfaces.Rest.Resources.ClientResource
Profiles.Interfaces.Rest.Assembler.CreateClientCommandFromResourceAssembler --> Profiles.Domain.Model.Commands.CreateClientCommand
Profiles.Interfaces.Rest.Assembler.CreateClientCommandFromResourceAssembler --> Profiles.Interfaces.Rest.Resources.CreateClientResource

Profiles.Interfaces.Rest.Assembler.ProviderResourceFromEntityAssembler --> Profiles.Domain.Model.Aggregates.Providers
Profiles.Interfaces.Rest.Assembler.ProviderResourceFromEntityAssembler --> Profiles.Interfaces.Rest.Resources.ProviderResource
Profiles.Interfaces.Rest.Assembler.CreateProviderCommandFromResourceAssembler --> Profiles.Domain.Model.Commands.CreateProviderCommand

Profiles.Interfaces.Rest.Assembler.ProviderProfilesResourceFromEntityAssembler --> Profiles.Domain.Model.Aggregates.Provider_Profiles
Profiles.Interfaces.Rest.Assembler.CreateProviderProfilesCommandFromResourceAssembler --> Profiles.Domain.Model.Commands.CreateProviderProfiles

Profiles.Interfaces.Rest.Assembler.PortfolioImagesResourceFromEntityAssembler --> Profiles.Domain.Model.Aggregates.Portfolio_Images
Profiles.Interfaces.Rest.Assembler.CreatePortfolioImagesCommandFromResourceAssembler --> Profiles.Domain.Model.Commands.CreatePortfolioImagesCommand

Profiles.Interfaces.Rest.Assembler.SocialsResourceFromEntityAssembler --> Profiles.Domain.Model.Aggregates.Socials
Profiles.Interfaces.Rest.Assembler.CreateSocialsFromResourceAssembler --> Profiles.Domain.Model.Commands.CreateSocialsCommand

@enduml